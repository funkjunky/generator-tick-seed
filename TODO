TODO
---

 ~~Finished - Basic Tick Example~~

 *- tag v0.9
 *- push tags
 *- branch develop

 *- create various npm libraries for middlewares
 *- rename repository to “effect-tick”
 *- merge to master
 *- tag v1.0
 *- branch develop
 *- Greatly improve README for anyone to use

 *- bind key to shoot fireball from me. Enemy is still automatic.

 *- add y coordinate to demo entity reducer and all actions
 *- update seek to work with y coordinate
 *- add the y coordinate for graphics
 *- ensure it all still works

 *- add jump action
 *- ensure it works
 *- seek doesn’t seek y properly.
 *- commit, push

 *- npm link tick folder

 *- Tick: switch the effect for an action, so any library can use it.
 *- get my project to work with the new action version.

 *- clean up folder structure
 *- graphics should be in a separate folder.. for now keep it in graphics.js
 *- get the thing working again with the file moves.
 *- all generator actions should probably be taken down a function. Do I need to do args => generator(), while not just generator(args)?

 *- copy the code and create a seed project
 *- get the seed working with parcel instead of webpack/babel
 *- push seed

 *- copy the seed and create a new game!

 *- look up graphics utility libraries for canvas javascript

 https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images
	(“DRAWNOW” name of library)
	thiefSpriteSheet = {
		name: ‘thief’,
		width: 48,
		height: 96
	};
	thief.attack.left = sequence(thiefSpriteSheet, 5,6,7,8,9,10);

	thief[thief.action][thief.direction](
		thief.action.progress,
		thief.x,
		thief.y
	);

~~ UX: Cues and rejections:
	- instead of disallowing an action, let the user attempt the action, then reject it and give a cue that it failed.
	This way, if the users state was just out of date, but the server knew their state was fine, the user well still succeed!
	Example: The user tried to open a door, but their machine it’s locked, but on the server another user unlocked the door. The users client REJECTS the door-open action, but sends the action over the server anyways, the server returns OK, because another user unlocked the door, and therefor the server ALLOWS the open-door action. Eventually the server returns the state with the door open, and the client CATCHES UP.
	- In this sense, I think it’d be wise to delay-fade a rejection UX cue… just in case the client was just a little slow.

 ~ event(onClick) => action(client and server) => accept or reject => cue and action ({ type: ‘seek’, meta: { generator: } })
 ~ receive server state => calculate client state, based on server state [given timestamp]

 *- update README and package.json
 *- make first commit
 *- push to repo
 *- ipad mini resolution

~~Idea: if i want per-entity timetravel, then I’ll need to use effects to call other generators and ticks and provide them with the “parent”, so when we want to rewind, we’ll need to check all activeGenerators and ignore all parent generators, while canceling and re-applying leaf generators until we’ve reached our current state.

 - how do I get my tick action to work with activeGenerators below?

 - generatorStateMiddleware (if meta: generator, then add to list)
	- { activeGenerators: {
		[generatorId]: {
			action: {}
			cancel: () => {},

			//Imagine rewinding only a single generator!
			actionTimeTravelHistory: [],
		}
	} }
	- return generatorId when meta.generator
	- MUST be ordered before redux-yield-effect middleware

 - generator action:
	{
		type: ‘fireball’,
		meta: {
			generator: function* (action) {
			}
		}
	}

 - cancel action takes generatorId

 - figure out the graphics
	- in middleware, when “walking” generator dispatched, also dispatching “walking-start” action, to reset walking frames and initialize if not already initialized.
	- on walking_step action, dispatching an update for the animation frames.

 - event(onClick) => action(client and server) => accept or reject => cue and action ({ type: ‘seek’, meta: { generator: } })
 - display a sprite to ensure it works.
 - add full thief spritesheet, movement, attacks all directions
 - add controls for movement of thief and to do attack animation
 - Ensure it all runs smoothly

 - Add slime spreadsheet and place a slime in the game
 - Use generators to create a knife throwing attack for the thief at the slime.

 - Add an AI for the slime to move around
 - Add an AI for the slime to aggro someone if they are close enough (vision).

 - add a checkbox to draw graphics or not to see how disconnected graphics are to gameplay.

 - add play/pause

 - add rewind during pause
 - ensure resume resumes from where we rewound to.

 - Add some stats… see below.

 - Finish the new game
	- make a fightable entity type
		[x, y, hp, stats] (see below for max flexability)
		[mov = () => {…} //selector based on stats]
		[maxhp = () => {…} //selector based on stats]
		[All other abilities are based on stats]

	// knife thrower (thief sprite w knife projectile)
	export default {
        	actions: []
		reducer: () => {}
		mov: () => pixels per second
		maxhp: () => …
		defaultStats: { … }
        }
	entityTraits = { bowman, fightable }

	createEntity({ traits: [‘bowman’, ‘awesome’, ‘wizard’] });

	in entity reducer:
	state.traits.reduce((state, trait) => {
		return entityTraits[trait].reducer(state, action);
	}, state);

	const traitDependents = {
		fightable: [‘bowman’, ‘wizard’]
	};
	const traitDependencies = {
		bowman: ‘fightable’
		wizard: ‘fightable’
	};
	// auto resolve reducers based on dependencies or dependents

	- create a bowmen as a fightable entity type
		~~How???~~
		~~in entities, but has different actions???~~
	- create and draw bowmen with upside down triangle
	- add movement with click, seek to location

	- add slime as a fightable entity type
	- Have slime slowly seek towards any good guys

	- add automatic attacking enemy if in range
	- add right click skill pushback attack

	- add automatic attack for slime

	- ???What else to add to test system???



 - see notes, and do turn based RPG with 2d plane

 - pause individual ticks, would be handy. Could freeze a character and all their abilities, or just an ability, etc.

 - Advanced Logger with a tree
	~ maybe in middleware to detect generator, then pass on to effect processor that it has a parent. I would need to intercept “put” effects to add them to the tree, and add a branch to be passed on to other put effects, also tick?? Different colours for effects and actions?

 - WHen I need more performance, REGL and glsify, as well as a tutorial on gl sl shaders